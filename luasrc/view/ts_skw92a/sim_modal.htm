<%
	local config = "tsmodem"
	local uci = require "luci.model.uci".cursor()
	local util = require "luci.util"
	local globals = uci:get_all(config, "globals")
	--util.dumptable(globals)
%>

<script type="text/javascript">
//<![CDATA[

// gets a record from uci like <settings.globals.proto='first.Протокол 1' 'second.Протокол 2' 'third.Протокол 3'>
// returns object like {"first": "Протокол 1", "second": "Протокол 2", "third": "Протокол 3"}
function widgetPopulation(uci_section, uci) {
	var section = uci.get("<%=config%>", uci_section) || [];
	return function(uci_option) {
		var population = {}
		if (section[uci_option]) {
			section[uci_option].forEach(function(p) {
				population[p.split(".")[0]] = p.split(".")[1];
			})
		}
		return population
	}
}

function edit_sim(btn) {
	var globals_data = {}
	var simid = btn.getAttribute("data-simid") || null;
	L.require("ui").then(function(ui){
		L.require("uci").then(function(uci) {
			uci.load("<%=config%>").then(function(out){
				console.log(simid)
				var sim_data = uci.get("<%=config%>", "sim_" + simid);
				var comm = new ui.Dropdown('sim0', {'sim0': 'Переключить SIM'} , { 
					disabled: true, 
					sort: true });

				var rssi = new ui.Textfield(sim_data["rssi_min"], {
					datatype: "rangelength(1,2)" });

				var timeout = new ui.Textfield(sim_data["timeout"], {
					datatype: "rangelength(1,4)" });

				var balance_min = new ui.Textfield(sim_data["balance_min"], {
					datatype: "rangelength(2,4)" });

				var balance_ussd = new ui.Textfield(sim_data["balance_ussd"], {
					datatype: "rangelength(3,8)" });

				var balance_mask = new ui.Textfield(sim_data["balance_mask"], {
					datatype: "rangelength(6,128)" });


				var memo = new ui.Textfield(sim_data["name"], {
					datatype: "rangelength(4,128)" });

				var balance_template = new ui.TextAreaHighlighted("Баланс %_RUB_% р.", { 
					optional: true,
					datatype: "rangelength(0,256)",
					readonly: true,
					highlights: ["%_RUB_%"]
				});

<%+ts_skw92a/_modal_sim_balance_tmpl.js%>

				var balance_template_widget = balance_template.render()



				L.showModal('Редактировать реле', [
					E('div', { class: 'cbi-map' }, [
						E('div', { class: 'cbi-map-section' }, [
							E('div', { class: 'cbi-map-section-node' }, [
								E('div', { class: 'cbi-value' }, [
									E('label', { 'class': 'cbi-value-title memo-edit' }, _('Памятка') + ":"),
									E('div', { class: 'cbi-value-field memo-edit' }, [
										memo.render()
									])
								]),
								E('div', { class: 'cbi-value' }, [
									E('label', { 'class': 'cbi-value-title' }, _('Команда') + ":"),
									E('div', { class: 'cbi-value-field' }, [
										E('div', { class: 'cbi-value-field-flex'}, [
											E('div', { class: 'cbi-value-field-1col'}, [comm.render()]),
											E('div', { class: 'cbi-value-field-2col'}, [
												E('div', { class: 'table modal-section-param'}, [
													E('div', {class: 'tr table-titles'}, [
														E('div', {class: 'th', style: 'width: 100%'}, _("Параметры команды")),
														E('div', {class: 'th'}, _("Значение")),
													]),
													E('div', {class: 'tr cbi-rowstyle-1'}, [
														E('div', {class: 'td'}, "Уровень сигнала MIN, " + sim_data["rssi_unit"]),
														E('div', {class: 'td', style: "text-align: right;"}, [rssi.render()])
													]),
													E('div', {class: 'tr cbi-rowstyle-2'}, [
														E('div', {class: 'td'}, "Время не в сети MAX, " + sim_data["timeout_unit"]),
														E('div', {class: 'td', style: "text-align: right;"}, [timeout.render()])
													]),
													E('div', {class: 'tr cbi-rowstyle-1'}, [
														E('div', {class: 'td'}, "Баланс MIN, " + sim_data["balance_unit"]),
														E('div', {class: 'td', style: "text-align: right;"}, [balance_min.render()])
													])
												]),
												E('div', { class: 'table modal-section-param more-params'}, [
													E('div', {class: 'tr cbi-rowstyle-2'}, [
														E('div', {class: 'td', style: 'width: 100%;'}, _("USSD-команда баланса")),
														E('div', {class: 'td', style: "text-align: right;"}, [balance_ussd.render()]),
													]),
													E('div', {class: 'tr cbi-rowstyle-1'}, [
														E('div', {class: 'td', style: 'width: 100%; vertical-align: top;'}, "Шаблон SMS-сообщения о балансе"),
														// E('div', {class: 'td', style: "text-align: right;"}, [balance_mask.render()])
														E('div', { class: 'td' }, [
															E('div', { class: 'cbi-value-field message-template' }, [
																balance_template_widget,

																E('a', { 
																	name: 'tmpl-default',
																	style: 'color: grey;',
																	click: ui.createHandlerFn(this, function() {
																		return loadTmplDefault();
																	})
																}, _('Оригинал')),
																E('a', { 
																	name: 'tmpl-custom',
																	style: '',
																	click: ui.createHandlerFn(this, function() {
																		return loadTmplCustom();
																	})
																}, _('Шаблон')),

															]),
														]),
													])
												]),
												E('button', {
													'class': 'cbi-button cbi-button-apply',
													'data-action': 'show',
													'style': 'display: initial;',
													'click': ui.createHandlerFn(this, 'toggle_more')
												}, _('Дополнительные параметры') )
											])
										])
									])
								]),
							])
						])
					]),
					E('div', { class: 'cbi-value-field' }, [
						E('div', { class: 'btn', click: L.hideModal }, _('Закрыть')),
						' ',
						E('div', { class: 'btn success', "name": "apply",
							'click': ui.createHandlerFn(this, function() {
								// Check all form validity
								var widget_list = [comm, rssi, timeout, balance_min, balance_ussd, balance_mask, memo];
								var form_valid = true;
								if (form_valid) {
									return handleEdit(simid, sim_data, globals_data);
								}
								else {
									return 0;
								}
							})
						}, _('Сохранить'))
					])
				]);
			})	
		})
	})
}
function handleEdit(simid, sim_data, globals_data) {
	send_action("edit", simid, { "sim_data": sim_data, "globals_data": globals_data } )
}
//]]>
</script>