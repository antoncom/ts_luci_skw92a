<script type="text/javascript">
//<![CDATA[
L.require("dom").then(function(dom)	{
	L.require("ui").then(function(ui)	{
		var DropdownProto = ui.Dropdown.extend({
			/** @private */
			saveValues: function(sb, ul) {
				var sel = ul.querySelectorAll('li[selected]'),
				    div = sb.lastElementChild,
				    name = this.options.name,
				    strval = '',
				    values = [];

				// Custom override: if user select the same value,
				// then do nothing.
				if(this.previousValue == sel[0].innerText) {
					return
				}
				this.previousValue = sel[0].innerText
				//

				while (div.lastElementChild)
					div.removeChild(div.lastElementChild);

				sel.forEach(function (s) {
					if (s.hasAttribute('placeholder'))
						return;

					var v = {
						text: s.innerText,
						value: s.hasAttribute('data-value') ? s.getAttribute('data-value') : s.innerText,
						element: s
					};

					div.appendChild(E('input', {
						type: 'hidden',
						name: name,
						value: v.value
					}));

					values.push(v);

					strval += strval.length ? ' ' + v.value : v.value;
				});

				var detail = {
					instance: this,
					element: sb
				};

				if (this.options.multiple)
					detail.values = values;
				else
					detail.value = values.length ? values[0] : null;

				sb.value = strval;

				sb.dispatchEvent(new CustomEvent('cbi-dropdown-change', {
					bubbles: true,
					detail: detail
				}));

				// Custom override:
				// Emits event on EventBus, once the Dropdown value is changed. 
				// UIAdapterHTTP and similars are subscribed to the event.
				window.EventBus.node.dispatchEvent(new CustomEvent("bus-proto-changed", {
					bubbles: true,
					detail: { "proto": sb.value }
				}));
			},

			/** @override */
			render: function() {
				var sb = E('div', {
					'id': this.options.id,
					'class': 'cbi-dropdown',
					'multiple': this.options.multiple ? '' : null,
					'optional': this.options.optional ? '' : null,
					'disabled': this.options.disabled ? '' : null
				}, E('ul'));

				var keys = Object.keys(this.choices);

				if (this.options.sort === true)
					keys.sort();
				else if (Array.isArray(this.options.sort))
					keys = this.options.sort;

				if (this.options.create)
					for (var i = 0; i < this.values.length; i++)
						if (!this.choices.hasOwnProperty(this.values[i]))
							keys.push(this.values[i]);

				for (var i = 0; i < keys.length; i++) {
					var label = this.choices[keys[i]];

					if (dom.elem(label))
						label = label.cloneNode(true);

					sb.lastElementChild.appendChild(E('li', {
						'data-value': keys[i],
						'selected': (this.values.indexOf(keys[i]) > -1) ? '' : null
					}, [ label || keys[i] ]));
				}

				if (this.options.create) {
					var createEl = E('input', {
						'type': 'text',
						'class': 'create-item-input',
						'readonly': this.options.readonly ? '' : null,
						'maxlength': this.options.maxlength,
						'placeholder': this.options.custom_placeholder || this.options.placeholder
					});

					if (this.options.datatype || this.options.validate)
						UI.prototype.addValidator(createEl, this.options.datatype || 'string',
						                          true, this.options.validate, 'blur', 'keyup');

					sb.lastElementChild.appendChild(E('li', { 'data-value': '-' }, createEl));
				}

				if (this.options.create_markup)
					sb.appendChild(E('script', { type: 'item-template' },
						this.options.create_markup));

				// Custom override:
				// Emits event on EventBus, once the Dropdown is rendered. 
				// UIAdapterHTTP and similars are subscribed to the event.
				var self = this
				self.timeout = setTimeout(function () {
					window.EventBus.node.dispatchEvent(new CustomEvent("bus-proto-changed", {
						bubbles: true,
						detail: { "proto": self.values[0] }
					}));
					clearTimeout(self.timeout)
				}, 100);
				//
				
				

				return this.bind(sb);
			},
		})
		ui["DropdownProto"] = DropdownProto;
	})
})
//]]>
</script>

