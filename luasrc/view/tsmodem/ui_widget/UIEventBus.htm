<script type="text/javascript">
/*
 * ui.EventBus() is used as communicator between reactive widget on the web page
 * If a widget wants his events to be listened by others, it has to register the events on EventBus
 * Then if some other widgets want to react the first widget state, then they subscribe the appropriate events on EventBus
**/
//<![CDATA[
L.require('ui').then(function(ui) {
	L.require("session").then(function(session){
		L.require('dom').then(function(dom) {
			var UIEventBus = ui.AbstractElement.extend(/** @lends LuCI.ui.Textarea.prototype */ {
				__init__: function() {

				/** @override */
				render: function() {
					var divEl = E('div', {
						class: 'event-bus',
						style: 'display: none'
					});
					return this.bind(divEl);
				},

				/** @private */
				bind: function(divEl) {
					this.node = divEl;
					dom.bindClassInstance(divEl, this);
					return divEl;
				},

				grammaValidator: function(gramma, errormsg) {
					return function(user_input_text) {
						const parser = new nearley.Parser(nearley.Grammar.fromCompiled(gramma));
						try {
							parser.feed(user_input_text)
							return true
						}
						catch (e) {
							return errormsg
						}
					}
				}

				register: function(source, eventName, sourceEvents=[], callback) {
					this.registerEvents(source, eventName, sourceEvents)
					this.node.addEventListener(eventName, L.bind(function(ev) {
						return callback(ev)
					}, this))
				},

				register2: function(source, eventName, sourceEvents=[], callback) {
					this.registerEvents(source, eventName, sourceEvents)
					this.node.addEventListener(eventName, L.bind(function(ev) {
						callback(ev, source)
					}, source))
				},

				register3: function(source, eventName, sourceEvents=[], callback) {
					var dispatchFn = L.bind(function(ev) {
						this.node.dispatchEvent(new CustomEvent(eventName, {
							bubbles: true,
							srcElement: source
						}));
						callback(source)
					}, this);

					for (var i = 0; i < sourceEvents.length; i++) {
						source.addEventListener(sourceEvents[i], dispatchFn);
					}
				}
			});
			ui["EventBus"] = UIEventBus;
		});
	});
});
//]]>
</script>
