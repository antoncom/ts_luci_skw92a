<%
	local config = "tsmodem"
	local adapter_config = "tsmodem_adapter_provider"
	local uci = require "luci.model.uci".cursor()
	local util = require "luci.util"
	local log = require "luci.model.tsmodem.util.log"

%>
<%
	local adapter_list = require "luci.model.tsmodem.adapter_list"
	local name, dropdown = '', {}
	local adapter = adapter_list["tsmodem_adapter_provider"]
	local adapters = uci:get_all(adapter_config)
	print(adapter():render("cssfile"))
	print(adapter():render("validator"))
	print(adapter():render("widgetfile"))


%>
<%+tsmodem/ui_widget/UIAdapterEmpty.js%>
<%+tsmodem/ui_override/DropdownProto.js%>

<script type="text/javascript">
//<![CDATA[


function my_handleEdit(simid, sim_data, adapter_data) {
	console.log("HEREREER")
	console.log(adapter_data)
	send_action("edit", simid, { "sim_data": sim_data, "adapter_data": adapter_data } )
}


function my_handler(a) {
	alert(a)
}

function edit_sim(btn) {
	var globals_data = {}
	var simid = btn.getAttribute("data-simid") || null;
	L.require("ui").then(function(ui){
		L.require("uci").then(function(uci) {
			uci.load("<%=config%>").then(function(out){
				var sim_data = uci.get("<%=config%>", "sim_" + simid);
				//var	adapter_data = uci.get("<%=adapter_config%>", sim_data["provider"]);
				var	adapter_data = {}
				var adapters = <%= util.serialize_json(adapters) %>
				if(adapters["template"]) {
					delete adapters["template"];
				}

				var	adapter_widgets = [];

				var proto = new ui.DropdownProto(sim_data["provider"], <%= util.serialize_json(adapter():list()) %>, {
					disabled: false,
					sort: true
				});


				var rssi = new ui.Textfield(sim_data["signal_min"], {
					datatype: "rangelength(1,2)",
					optional: false
				});


				var balance_min = new ui.Textfield(sim_data["balance_min"], {
					datatype: "rangelength(2,4)",
					optional: false
				});

				var timeout_reg = new ui.Textfield(sim_data["timeout_reg"], {
					datatype: "rangelength(1,4)",
					optional: false
				});

				var timeout_signal = new ui.Textfield(sim_data["timeout_signal"], {
					datatype: "rangelength(1,4)",
					optional: false
				});

				var timeout_bal = new ui.Textfield(sim_data["timeout_bal"], {
					datatype: "rangelength(1,4)",
					optional: false
				});


				// ADAPTER INITS
				<%
					for adptype, adapter in pairs(adapter_list) do
						print(adapter():render("jsinit"))
					end
				%>


				var memo = new ui.Textfield(sim_data["name"], {
					datatype: "rangelength(3,128)" });

				var emptyProto = new ui.AdapterEmpty()


				L.showModal('Редактировать настройки Сим-карты', [
					E('div', { class: 'cbi-map' }, [
						E('div', { class: 'cbi-map-section' }, [
							E('div', { class: 'cbi-map-section-node' }, [
								E('div', { class: 'cbi-value' }, [
									E('label', { 'class': 'cbi-value-title memo-edit' }, _('Памятка') + ":"),
									E('div', { class: 'cbi-value-field memo-edit' }, [
										memo.render()
									])
								]),

								E('div', { class: 'cbi-value' }, [
									E('label', { 'class': 'cbi-value-title' }, _('Уровень сигнала MIN, %') + ":"),
									E('div', { class: 'cbi-value-field' }, [rssi.render()])
								]),
								E('div', { class: 'cbi-value' }, [
									E('label', { 'class': 'cbi-value-title' }, _('Баланс MIN, руб.') + ":"),
									E('div', { class: 'cbi-value-field' }, [balance_min.render()])
								]),

								E('div', { class: 'cbi-value' }, [
									E('label', { 'class': 'cbi-value-title' }, _('Сеть') + ":"),
									E('div', { class: 'cbi-value-field' }, [
										E('div', { class: 'cbi-value-field-flex'}, [
											E('div', { class: 'cbi-value-field-1col'}, [
												proto.render()

											]),
											E('div', { class: 'cbi-value-field-2col'}, [
												// ADAPTER WIDGETS RENDER
												emptyProto.render(),
												<%
													for atype, adapter in pairs(adapter_list) do
														print(adapter():render("jsrender") .. ",\n")
													end
												%>
												E('div', { class: 'table modal-section-param more-params'}, [
													E('div', {class: 'tr cbi-rowstyle-0'}, [
														E('div', {class: 'td', style: "width: 100%;"}, 'Таймаут "не в сети", сек.'),
														E('div', {class: 'td', style: "text-align: right;"}, [timeout_reg.render()])
													]),
													E('div', {class: 'tr cbi-rowstyle-1'}, [
														E('div', {class: 'td', style: "width: 100%;"}, 'Таймаут "слабый сигнал", сек.'),
														E('div', {class: 'td', style: "text-align: right;"}, [timeout_signal.render()])
													]),
													E('div', {class: 'tr cbi-rowstyle-0'}, [
														E('div', {class: 'td', style: "width: 100%;"}, 'Таймаут, "баланс ниже номы", сек.'),
														E('div', {class: 'td', style: "text-align: right;"}, [timeout_bal.render()])
													]),
												]),
												E('button', {
													'class': 'cbi-button cbi-button-apply',
													'data-action': 'show',
													'style': 'display: initial;',
													'click': ui.createHandlerFn(this, 'toggle_more')
												}, _('Дополнительные параметры') )
											])
										])
									])
								]),
							])
						])
					]),

					E('div', { class: 'cbi-value-field' }, [
						E('div', {
							class: 'btn',
							click: function() { L.hideModal() }
						}, _('Закрыть')),
						' ',

						E('div', { class: 'btn success', "name": "apply",
							'click': ui.createHandlerFn(this, function() {
								// We load all adapters' data, but only selected protocol data will pass the validation
								<%
									print(string.format('adapter_data[sim_data["provider"]] = %s', adapter():render("getvalues") ))
									print(string.format('adapter_widgets["tsmodem_adapter_provider"] = %s', adapter():render("getfields") ))

								%>

								var widget_list = []


								var widget_list = [proto, rssi, timeout_signal, timeout_bal, timeout_reg, balance_min, memo];
								if(adapter_widgets[sim_data["provider"]] != undefined) {
									//widget_list = widget_list.concat(tsmodem_adapter_provider.getFields())
								}



								var form_valid = true;
								for(var w of widget_list) {
									w.triggerValidation()
									if(!w.isValid()) {
										form_valid = false
										break;
									}
								}

								if (form_valid) {
									sim_data["name"] = memo.getValue()
									sim_data["proto"] = proto.getValue()

									sim_data["signal_min"] = rssi.getValue()
									sim_data["balance_min"] = balance_min.getValue()

									sim_data["timeout_reg"] = timeout_reg.getValue()
									sim_data["timeout_signal"] = timeout_signal.getValue()
									sim_data["timeout_bal"] = timeout_bal.getValue()

									my_handleEdit(simid, sim_data, adapter_data);
									return true;

								}
								else {
									//return 0;
								}

							})
						}, _('Сохранить'))

					])
				]);
			})
		})
	})
}



//]]>
</script>
