<%

local config = "tsmodem"
local uci = require "luci.model.uci".cursor()
local util = require "luci.util"

local uci_signal_min = {
	["sim_0"] = uci:get(config, "sim_0", "signal_min"),
	["sim_1"] = uci:get(config, "sim_1", "signal_min")
}


%>
<script type="text/javascript">
//<![CDATA[
	L.require("uci").then(function(uci) {
		uci.load("tsmodem").then(function(out){
			window.low_signal_timer = 0;
			window.overlay_type = "";
			window.uci_timeout_signal = {}
			window.uci_timeout_signal["sim_0"] = uci.get("tsmodem", "sim_0", "timeout_signal")
			window.uci_timeout_signal["sim_1"] = uci.get("tsmodem", "sim_1", "timeout_signal")


			window.uci_timeout_reg = {}
			window.uci_timeout_reg["0"] = uci.get("tsmodem", "sim_0", "timeout_reg")
			window.uci_timeout_reg["1"] = uci.get("tsmodem", "sim_1", "timeout_reg")

			window.uci_timeout_bal = {}
			window.uci_timeout_bal["sim_0"] = uci.get("tsmodem", "sim_0", "timeout_bal")
			window.uci_timeout_bal["sim_1"] = uci.get("tsmodem", "sim_1", "timeout_bal")

			var network_state = {
				"0": ["Сеть недоступна", "NOT REGISTERED"],
				"1": ["Активно", "REGISTERED"],
				"2": ["Поиск сети", "SEARCHING"],
				"3": ["Отказ в регистрации", "DENIED"],
				"4": ["Неизвестно", "UNKNOWN"],
				"5": ["Активно-роуминг", "ROAMING"],
				"6": ["Не активна", "OK"],
				"7": ["Переподключение ttyUSB2", "UNKNOWN"]
			}


			function sleep(ms) {
			  return new Promise(resolve => setTimeout(resolve, ms));
			}

			function animationWrapper(str) {
				var html = ''
				str = "" + str
				for (c=0; c < str.length; c++) {
					html = html + '<span class="anime">' + str[c] + '</span>'
				}
				return(html)
			}

			var old_network_registration = "4"
			async function update_with_animation(sim_id, varname, ui_data) {
				var placeholder = '#simid-' + sim_id + ' .' + varname
				var rendered = document.querySelector(placeholder)

				var value = ui_data[varname]

				if(varname == "network_registration") {
					if (value == "") {
						value = old_network_registration; // don't change if no data received
					} else {
						old_network_registration = value;
					}

					var bgIcon_Y = -(value * 15) // see www/luci-static/resources/ts_skw92a/img/icon_reg_status.png
					if(value != "1" && value != "7" &&  window.lastreg_timer != "0" && window.lastreg_timer != undefined) {
						rendered.innerHTML = '<i style="background-position: 0 ' + bgIcon_Y + 'px;">' + animationWrapper(network_state[value][0]) + "</i> &nbsp;<small><font color='red'>( .." + window.lastreg_timer + " сек.) </font></small>";
					} else {
						rendered.innerHTML = '<i style="background-position: 0 ' + bgIcon_Y + 'px;">' + animationWrapper(network_state[value][0]) + "</i>"
					}

				} else if (varname == "signal" && value != "101") {
					if(window.low_signal_timer != undefined && window.low_signal_timer >= 1) {
						rendered.innerHTML = animationWrapper(value + " %")  + "&nbsp;<small><font color='red'>( .." + window.low_signal_timer + " сек.) </font></small>";

					} else {
						rendered.innerHTML = animationWrapper(value + " %");
					}

				} else if (varname == "sim_balance" && value != "" && value != "-") {
					var balance_date = '<br><small>' + ui_data["event_datetime"] + '</small>';
					//if(window.lowbalance_timer != undefined and window.lowbalance_timer > 0) {
					if(window.lowbalance_timer != undefined && window.lowbalance_timer > 0) {
						rendered.innerHTML = value + " руб. " + "&nbsp;<small><font color='red'>( .." + window.lowbalance_timer + " сек.) </font></small>" + balance_date;
					} else {
						rendered.innerHTML = value + " руб." + balance_date;
					}
				}


				$(placeholder + ' .anime').each(function() {
					var that = $(this);
				    setTimeout(function() {
				        that.animate({ fontSize: "15px", "font-weight": 900 }, 210 )
				            .animate({ fontSize: "13px", "font-weight": 100 }, 210 );
				    },that.index()*70);
				});

				//await sleep(1000)
			}


			async function update_without_animation(sim_id, varname, ui_data) {
				var placeholder = '#simid-' + sim_id + ' .' + varname
				var rendered = document.querySelector(placeholder)

				var value = ui_data[varname]
				if(varname == "network_registration") {
					if (value == "") {
						value = old_network_registration; // don't change if no data received
					} else {
						old_network_registration = value;
					}

					var bgIcon_Y = -(value * 15) // see www/luci-static/resources/ts_skw92a/img/icon_reg_status.png
					rendered.innerHTML = '<i style="background-position: 0 ' + bgIcon_Y + 'px;">' + network_state[value][0] + "</i>"

				} else if (varname == "level" || varname == "error") {
					rendered.innerHTML = value + " %"

				} else if (varname == "balance") {
					var balance_date = '<br><small>' + ui_data["event_date"] + '</small>'
					rendered.innerHTML = value + " руб." + balance_date;
				} else if (varname == "signal") {
					rendered.innerHTML = value + " %" + value;
				}

			}


			window.update_with_animation = update_with_animation

			function update_journal(raw_data) {

				var raw_html = `<div class="tr cbi-rowstyle-0">
									<div class="td" data-title="Дата / время">
										<b>{date}</b><i>{time}</i>
									</div>
									<div class="td" data-title="Событие">
										{name}
									</div>
									<div class="td" data-title="Источник">
										{source}
									</div>
									<div class="td" data-title="Команда">
										{command}
									</div>
									<div class="td" data-title="Ответ">
										{response}
									</div>
								</div>`
				var journal = document.querySelector(".journal")
				var journal_header = document.querySelector(".journal .table-titles")
				var date = '', time = '';


				for(var key in raw_data) {
					var find = '\{' + key + '\}';
					var re = new RegExp(find, 'g');
					var value = '';

					if(key == "datetime") {
						date = raw_data["datetime"].split(" ")[0]
						time = raw_data["datetime"].split(" ")[1]
						raw_html = raw_html.replace(/\{date\}/, date)
						raw_html = raw_html.replace(/\{time\}/, time)
					} else if(key == "response") {
						value = raw_data['response'];
						if(value.match(/^[0-9]+$/) != null) {
							if(raw_data['source'] == 'Модем') {
								if(raw_data['response'] == 1) {
									raw_html = raw_html.replace(re, '<span class="response REGISTERED">' + network_state[value][1]) + '</span>'

								} else {
									raw_html = raw_html.replace(re, network_state[raw_data['response']][1])
								}
							} else if (raw_data['source'] == 'Микроконтроллер') {
								raw_html = raw_html.replace(re, raw_data['response'])
							}

						} else {
							raw_html = raw_html.replace(re, value)
						}
					} else {
						raw_html = raw_html.replace(re, raw_data[key])
					}
				}
				journal_header.insertAdjacentHTML('afterend', raw_html)
			}

			window.update_journal = update_journal


			var host = window.location.host;
		    //window.socket = new WebSocket('wss://' + host + ':7890');
		    window.socket = new WebSocket('ws://' + host + ':7890');

		    var modemDisconnected = false

		    try {
			    window.socket.onopen = function(event) {

			    };
			    window.socket.onmessage = function(event) {

			        // Parse data received from Websocket
			        // Update UI elements


			        var ui_data = JSON.parse(event.data)

					var sim_id = ui_data["sim_id"] || false
					var sid = parseInt(sim_id)

					var network_registration = ui_data["network_registration"] || ""

					if(ui_data.lastreg_timer && parseInt(ui_data.lastreg_timer) > 0) {
						window.lastreg_timer = parseInt(window.uci_timeout_reg[sid]) - parseInt(ui_data.lastreg_timer)
					} else {
						//window.lastreg_timer = 0
					}

					if(ui_data.lowbalance_timer && (parseInt(ui_data.lowbalance_timer) > 0)) {
						window.lowbalance_timer = parseInt(window.uci_timeout_bal["sim_" + sid]) - parseInt(ui_data.lowbalance_timer)
						console.log(window.lowbalance_timer)
					} else {
						//window.lowbalance_timer = 0
					}

					if(ui_data.low_signal_timer && (parseInt(ui_data.low_signal_timer) > 0)) {
						window.low_signal_timer = parseInt(window.uci_timeout_signal["sim_" + sid]) - parseInt(ui_data.low_signal_timer)
					} else {
						//window.low_signal_timer = 0
					}


					if(ui_data.sim_balance_ussd_response && ui_data.sim_balance_ussd_response != "") {
						console.log("Original USSD responce: " + ui_data.sim_balance_ussd_response)
					} else {
						//window.low_signal_timer = 0
					}




					if(network_registration == "" || network_registration == "7") {
						modemDisconnected = true
					} else {
						modemDisconnected = false
					}


					if(sim_id) {
						for(var k in ui_data) {
				        	if(k != "sim_id") {
				        		update_with_animation(sim_id, k, ui_data)

				        		var inactive_sim_id = (parseInt(sim_id) == 0) ? "1" : "0"
				        		update_without_animation(inactive_sim_id, "network_registration", {"network_registration": "4"})
				        	}
				        }
				        // Disable "Activate" button of currently activated Sim
				        document.querySelector("input[type=button].sim-" + sim_id).disabled = true

				        // Enable "Activate" button of another Sim only if current Sim has already activated
				        var inactive_sim_id = (parseInt(sim_id) == 0) ? "1" : "0"
				        if(network_registration != "" && !modemDisconnected) {
				        	document.querySelector("input[type=button].sim-" + inactive_sim_id).disabled = false
				        }
					}

					if (ui_data["journal"] != undefined) {
						if (ui_data["journal"]["response"] == "disconnected") {
							modemDisconnected = true

							document.querySelector("input[type=button].sim-0").disabled = true
							document.querySelector("input[type=button].sim-1").disabled = true
						}
						if (ui_data["journal"]["response"] == "connected") {
							modemDisconnected = false
						}

						update_journal(ui_data["journal"])
					}

					if(ui_data["sim_balance"] != undefined && ui_data["sim_id"] != undefined && ui_data["event_datetime"] != undefined)  {
						var sim_id = ui_data["sim_id"]
						var sim_balance = ui_data["sim_balance"]

						update_with_animation(sim_id, "sim_balance", ui_data)

					}

					// Show overlay and block any user's activities
					if(ui_data["event_switch_state"] != undefined && ui_data["event_switch_state"] == "begin") {
						document.querySelector("input[type=button].sim-0-settings").disabled = true
						document.querySelector("input[type=button].sim-1-settings").disabled = true

						document.querySelector("input[type=button].sim-0").disabled = true
						document.querySelector("input[type=button].sim-1").disabled = true
						if ($("#overlay").length > 0) {
							removeOverlay();
							displayOverlay('Переключение Сим-карты..');
						} else {
							displayOverlay('Переключение Сим-карты..');
						}
					}

					// Hide overlay and allow any user's activities
					if(ui_data["event_switch_state"] != undefined && ui_data["event_switch_state"] == "end") {
						if ($("#overlay").length > 0) {
							removeOverlay();
						}

						document.querySelector("input[type=button].sim-0-settings").disabled = false
						document.querySelector("input[type=button].sim-1-settings").disabled = false

						document.querySelector("input[type=button].sim-0").disabled = false
						document.querySelector("input[type=button].sim-1").disabled = false
					}



					//if(ui_data["signal"] != undefined) {
					//	update_with_animation(sim_id, "signal", ui_data)
					//}



			    };
			    window.socket.onclose = function(event) {
			        update_with_animation("0", "network_registration", {"network_registration": "4"})
			        update_with_animation("1", "network_registration", {"network_registration": "4"})
			    };

			} catch (exception) {
		    	console.log('Error' + exception)
		        update_with_animation("0", "network_registration", {"network_registration": "4"})
		        update_with_animation("1", "network_registration", {"network_registration": "4"})
		    }

		})
	})
//]]>
</script>
